// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/crawler/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "failed-interview/03/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReader is a mock of Reader interface
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockReader) List(links []string, timeout uint) []*entity.Links {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", links, timeout)
	ret0, _ := ret[0].([]*entity.Links)
	return ret0
}

// List indicates an expected call of List
func (mr *MockReaderMockRecorder) List(links, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReader)(nil).List), links, timeout)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockRepository) List(links []string, timeout uint) []*entity.Links {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", links, timeout)
	ret0, _ := ret[0].([]*entity.Links)
	return ret0
}

// List indicates an expected call of List
func (mr *MockRepositoryMockRecorder) List(links, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), links, timeout)
}

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetList mocks base method
func (m *MockUseCase) GetList(links []string, timeout uint) []*entity.Links {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", links, timeout)
	ret0, _ := ret[0].([]*entity.Links)
	return ret0
}

// GetList indicates an expected call of GetList
func (mr *MockUseCaseMockRecorder) GetList(links, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockUseCase)(nil).GetList), links, timeout)
}
