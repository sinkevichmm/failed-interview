// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	SaveFile(ctx context.Context, opts ...grpc.CallOption) (FileService_SaveFileClient, error)
	GetFileInfoByID(ctx context.Context, in *GetFileInfoByIDRequest, opts ...grpc.CallOption) (*GetFileInfoByIDResponse, error)
	GetFileIDs(ctx context.Context, in *GetFileIDsRequest, opts ...grpc.CallOption) (*GetFileIDsResponse, error)
	GetFreeCapacity(ctx context.Context, in *GetFreeCapacityRequest, opts ...grpc.CallOption) (*GetFreeCapacityResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	GetFileByID(ctx context.Context, in *GetFileByIDRequest, opts ...grpc.CallOption) (FileService_GetFileByIDClient, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) SaveFile(ctx context.Context, opts ...grpc.CallOption) (FileService_SaveFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], "/fs.FileService/SaveFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceSaveFileClient{stream}
	return x, nil
}

type FileService_SaveFileClient interface {
	Send(*SaveFileRequest) error
	CloseAndRecv() (*SaveFileResponse, error)
	grpc.ClientStream
}

type fileServiceSaveFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceSaveFileClient) Send(m *SaveFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceSaveFileClient) CloseAndRecv() (*SaveFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SaveFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) GetFileInfoByID(ctx context.Context, in *GetFileInfoByIDRequest, opts ...grpc.CallOption) (*GetFileInfoByIDResponse, error) {
	out := new(GetFileInfoByIDResponse)
	err := c.cc.Invoke(ctx, "/fs.FileService/GetFileInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileIDs(ctx context.Context, in *GetFileIDsRequest, opts ...grpc.CallOption) (*GetFileIDsResponse, error) {
	out := new(GetFileIDsResponse)
	err := c.cc.Invoke(ctx, "/fs.FileService/GetFileIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFreeCapacity(ctx context.Context, in *GetFreeCapacityRequest, opts ...grpc.CallOption) (*GetFreeCapacityResponse, error) {
	out := new(GetFreeCapacityResponse)
	err := c.cc.Invoke(ctx, "/fs.FileService/GetFreeCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/fs.FileService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileByID(ctx context.Context, in *GetFileByIDRequest, opts ...grpc.CallOption) (FileService_GetFileByIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], "/fs.FileService/GetFileByID", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceGetFileByIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_GetFileByIDClient interface {
	Recv() (*GetFileByIDResponse, error)
	grpc.ClientStream
}

type fileServiceGetFileByIDClient struct {
	grpc.ClientStream
}

func (x *fileServiceGetFileByIDClient) Recv() (*GetFileByIDResponse, error) {
	m := new(GetFileByIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	SaveFile(FileService_SaveFileServer) error
	GetFileInfoByID(context.Context, *GetFileInfoByIDRequest) (*GetFileInfoByIDResponse, error)
	GetFileIDs(context.Context, *GetFileIDsRequest) (*GetFileIDsResponse, error)
	GetFreeCapacity(context.Context, *GetFreeCapacityRequest) (*GetFreeCapacityResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	GetFileByID(*GetFileByIDRequest, FileService_GetFileByIDServer) error
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) SaveFile(FileService_SaveFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedFileServiceServer) GetFileInfoByID(context.Context, *GetFileInfoByIDRequest) (*GetFileInfoByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfoByID not implemented")
}
func (UnimplementedFileServiceServer) GetFileIDs(context.Context, *GetFileIDsRequest) (*GetFileIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileIDs not implemented")
}
func (UnimplementedFileServiceServer) GetFreeCapacity(context.Context, *GetFreeCapacityRequest) (*GetFreeCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreeCapacity not implemented")
}
func (UnimplementedFileServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileServiceServer) GetFileByID(*GetFileByIDRequest, FileService_GetFileByIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileByID not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_SaveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).SaveFile(&fileServiceSaveFileServer{stream})
}

type FileService_SaveFileServer interface {
	SendAndClose(*SaveFileResponse) error
	Recv() (*SaveFileRequest, error)
	grpc.ServerStream
}

type fileServiceSaveFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceSaveFileServer) SendAndClose(m *SaveFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceSaveFileServer) Recv() (*SaveFileRequest, error) {
	m := new(SaveFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_GetFileInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileService/GetFileInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileInfoByID(ctx, req.(*GetFileInfoByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileService/GetFileIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileIDs(ctx, req.(*GetFileIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFreeCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFreeCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFreeCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileService/GetFreeCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFreeCapacity(ctx, req.(*GetFreeCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileByIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).GetFileByID(m, &fileServiceGetFileByIDServer{stream})
}

type FileService_GetFileByIDServer interface {
	Send(*GetFileByIDResponse) error
	grpc.ServerStream
}

type fileServiceGetFileByIDServer struct {
	grpc.ServerStream
}

func (x *fileServiceGetFileByIDServer) Send(m *GetFileByIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fs.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileInfoByID",
			Handler:    _FileService_GetFileInfoByID_Handler,
		},
		{
			MethodName: "GetFileIDs",
			Handler:    _FileService_GetFileIDs_Handler,
		},
		{
			MethodName: "GetFreeCapacity",
			Handler:    _FileService_GetFreeCapacity_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileService_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveFile",
			Handler:       _FileService_SaveFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFileByID",
			Handler:       _FileService_GetFileByID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/filetransfer.proto",
}
